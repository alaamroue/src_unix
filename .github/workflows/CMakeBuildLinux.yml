name: Building For Linux

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  BUILD_TYPE: Release
  QWT_INCLUDE_DIR: ${{ github.workspace }}/source_code/Vendors/Qwt/src
  QWT_LIBRARY_RELEASE: ${{ github.workspace }}/source_code/Vendors/Qwt/lib/libqwt.so
  QWT_LIBRARY_DEBUG: ${{ github.workspace }}/source_code/Vendors/Qwt/lib/libqwt.so
  DLL_DIR: ${{ github.workspace }}/source_code/Vendors/RequiredDLLs/

jobs:
  BuildForLinux:
    name: Build for Linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.12.11'

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQT_DIR=${{env.QT_DIR}} -DQWT_INCLUDE_DIR=${{env.QWT_INCLUDE_DIR}} -DQWT_LIBRARY_RELEASE=${{env.QWT_LIBRARY_RELEASE}} -DQWT_LIBRARY_DEBUG=${{env.QWT_LIBRARY_DEBUG}} -DDLL_DIR=${{env.DLL_DIR}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    
    - name: '⚙️ Install dependencies'
      run: |
          sudo apt-get update
          # sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev
          sudo apt install desktop-file-utils libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-composite0 libxcb-cursor0 libxcb-damage0 libxcb-dpms0 libxcb-dri2-0 libxcb-dri3-0 libxcb-ewmh2 libxcb-glx0 libxcb-present0 libxcb-randr0 libxcb-record0 libxcb-render0 libxcb-res0 libxcb-screensaver0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxkbcommon-x11-0
    
    - name: '🚧 Compile application'
      run: |
          echo "#define RELEASE \"AppImage\"" > release.h
          ${{env.QMAKE}} ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          lrelease QOwnNotes.pro
          make -j${{env.CORES}}
    - name: '⚙️ Install linuxdeploy'
      run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
    - name: '📦 Create AppImage'
      run: |
          export QMAKE=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/bin/${{env.QMAKE}}
          export PATH=${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/libexec:$PATH
          cp ../icons/icon.png QOwnNotes.png
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} -e ${{env.UNIXNAME}} -i ${{env.UNIXNAME}}.png -d PBE.QOwnNotes.desktop --plugin qt
          mkdir -p ${{env.BUILD_DIR}}/usr/plugins/iconengines && cp -r ${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/plugins/iconengines/libqsvgicon.so ${{env.BUILD_DIR}}/usr/plugins/iconengines
          mkdir -p ${{env.BUILD_DIR}}/usr/languages && cp -r languages/*.qm ${{env.BUILD_DIR}}/usr/languages
          cp -rL ${{env.REPO_DIR}}/Qt/${{env.QT_VERSION}}/gcc_64/lib/libQt6QmlWorkerScript.so.6 ${{env.BUILD_DIR}}/usr/lib
          find ${{env.BUILD_DIR}}
          ./linuxdeploy-x86_64.AppImage --appdir ${{env.BUILD_DIR}} --output appimage
          rm linuxdeploy-x86_64.AppImage
          rm linuxdeploy-plugin-qt-x86_64.AppImage
          ls -hal *.AppImage
          find -iname "*.AppImage"
          # It's ok if no file needs to be renamed
          mv *.AppImage ${{env.EXECUTABLE}}-x86_64.AppImage ||:
          sha256sum ${{env.EXECUTABLE}}-x86_64.AppImage > ${{env.EXECUTABLE}}-x86_64.AppImage.sha256sum
          ls -hal *.AppImage
          find -iname "*.AppImage"
          pwd